from fastapi import Request
import asyncio
import os
import json
import subprocess
import time
# from backend.transform_kpis import compute
from .transform_kpis import compute

# file that will run asynchronously and check the csv file generated by GHAMiner

inter_seconds = 10

#paths to files to read and write
root_path = os.path.dirname(os.path.abspath(__file__))
# paths to the files
csv_path_read =os.path.abspath( os.path.join(root_path, "builds_features.csv"))
json_path_write = os.path.abspath(os.path.join(root_path,"..","output","raw", "KPIs.json"))

# function that gets number of lines in csv
# usefull to determine if new data got added or not
def get_line_number():
    try:
        with open(csv_path_read, "r", encoding="utf-8") as csv:
            # does not count the header to simplify the comparing process
            result =sum(1 for _ in csv) - 1
            return result
    except Exception as e:
        print(f"[csv_checker] error when reading raw csv file: {e}")
        return 0


async def check_csv(request: Request):
    last_check_line_number = 0
    while not await request.is_disconnected():
        try:
            if os.path.exists(csv_path_read):
                # get the current line number
                curr_line_number = get_line_number()
                # checks if new lines got added
                if curr_line_number > last_check_line_number:
                    print(
                        f"[csv_checker] {curr_line_number - last_check_line_number} new lines found"
                    )
                    last_check_line_number = curr_line_number
                    try:
                        # start transforming and computing raw data to KPIs
                        data_to_send = compute(csv_path_read,json_path_write)
                        # serialize data (json string)
                        serialized_data = json.dumps(data_to_send)
                        # send data
                        yield f"data:{serialized_data}\n\n"
                    except Exception as e:
                        print(f"[csv_checker] error calling transform_kpis: {e}")

                else:
                    print(f"[csv_checker] no new lines found")
            else:
                print("[csv_checker] no csv file yet")
            # trigger the timeout
            await asyncio.sleep(inter_seconds)
        except Exception as e:
            print(f"[csv_checker] error: {e}")
        #to not flood with errors
        await asyncio.sleep(1)


if __name__ == "__main__":
    print("csv checker called from terminal")
    compute(csv_path_read,json_path_write)
